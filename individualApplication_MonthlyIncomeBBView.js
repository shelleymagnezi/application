//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// individualApplication
// gov.hhs.cms.ffe.ee.web.individualApplication
// web
//
var IndividualApplication_MonthlyIncomeBBView = FFEView.extend({
	el : $("#incomeSectionContainer"),

	model : individualApplicationApplicationBBModel,
	index : indAppState.getIndex(),
	contentTemplate : _.template($('#monthlyIncomeTemplate').html()),
	containerTemplate : _.template($('#monthlyIncomeContainerTemplate').html()),
	howOftenDDTemplate : _.template($('#incomeHowOftenDatatableDropDownTemplate').html()),
	
	namespace : "ffe.ee",
	pageName : "indApp",
	resources : resources,
	
	hubData : [],
	incomeFromHub : null,
	currentMember : {},
	currentMemberName :"", 
	previousEditValues : [], // for the edit, if they hit cancel, restore
	markedAsDeleted : [],
	deleteWarningShown : [],
	originalHubData : [], //stores original hub data to check again for discrepant indicator
	initialize : function() 
	{
		_.bindAll(this, 'render', 'refreshTemplate', 'initializeValidationAll', 'initializeValidationRow', 'edit', 'save', 
				'checkboxChecker', 'initializeDataTable', 'writeDataTable', 'editHubData', 'deleteHubData', 'saveHubDataEdit', 'cancelHubDataEdit',
				'confirmDelete', 'cancelDelete', 'createNewCustomEmployerIncome', 'toggleHourly', 'setDataToModel');
		
		this.model.bind('refreshMonthlyIncomeTemplates', this.refreshTemplate);
		this.model.bind('removeMonthlyIncome', this.confirmDelete);
		
		this.render();
	},

	events : 
	{
		"click .monthlyIncomeEdit" : "edit",
		"click .monthlyIncomeSave" : "save",
		"click .confirmDeleteIncomeSource" : 'confirmDelete',
		"click .cancelDeleteIncomeSource" : 'cancelDelete',
		"change .inLineHowOftenDropDown" : 'toggleHourly',
		"click .saveRow" : "saveHubDataEdit",
		"click .editHubData" : "editHubData",
		"click .deleteHubData" : "deleteHubData",
		"click .cancelHubDataEdit" : "cancelHubDataEdit"
	},
 	
	render : function() 
	{
		this.refreshTemplate();	
		return this;
	},
	
	refreshTemplate : function() 
	{
		var members = this.model.get('applicationMember');
		var currIndex = indAppState.getIndex();
		this.index = indAppState.getIndex();
		this.currentMember = members[currIndex];
		this.currentMemberName = getAppMemberFullName(this.currentMember);
		var emptyTable = null;
		
		if (!isMemberEmpty(members[this.index])){
			
			//monthly income page is only shown for filer (
			if (members[this.index].contactIndicator === true){

				//check to see if container template is empty, if so append it
				if ($('#monthlyIncome-section' + this.index).contents().length === 0)
				{
					//check to see if we need to display before the personal income summary card
					if ($('#personalIncomeSummaryPage' + this.index).contents().length !== 0){
						$('#personalIncomeSummaryPage' + this.index).before(this.containerTemplate({
							"index" : this.index
						}));
					}
					else
					{
						$('#incomeSectionContainer').append(this.containerTemplate({
							"index" : this.index
						}));
					}
				}
				
				//empty & append content template
				$('#monthlyIncome-section' + this.index).empty();
				$('#monthlyIncome-section' + this.index).append(this.contentTemplate({
					"index" : this.index,
					"personName" : getAppMemberFullName(members[this.index])
				})).closest(".cardContainer").show().nextAll(".cardContainer").hide();
				
				$('#monthlyIncomeInfoCorrect' + this.index).customInput();
				
				this.initializeDataTable();
				
				//hides checkbox (but checks it for validation purposes) when returning to hub page
				if(members[this.index].receivedCurrentIncomeSourceAttestation.length > 0){
					$('#monthlyIncomeInfoCorrect' + this.index).prop('checked', true);
					$('#monthlyIncomeInfoCorrectDiv' + this.index).hide();
				}
				
				emptyTable = $('#monthlyIncomeTable' + this.index).find('.dataTables_empty');
				if (emptyTable.length > 0)
				{
					console.log('No current income data found for ' + getAppMemberFullName(members[this.index]) + ' so rerouting');
					$('#monthlyIncome-section' + this.index).hide();
					indAppState.setCurrentView('monthlyIncomePage');
					this.model.trigger("refreshAdditionalMonthlyIncomeTemplates");
					router.navigate("additionalMonthlyIncome", {trigger: true});
					indAppState.resetCurrentView();
				}
			} else {
				indAppState.setCurrentView('monthlyIncomePage');
				this.model.trigger("refreshAdditionalMonthlyIncomeTemplates");
				router.navigate("additionalMonthlyIncome", {trigger: true});
				indAppState.resetCurrentView();
			}
		}
		
	},
	
	initializeValidationAll : function(i) {
		//manually add data-validate attrs to drop-downs after they are appended
		addValidationToId('inLineHowOften' + i, 'notBlank');

		var myValidator = new FFM.FormValidator($("#monthlyIncomePageContent" + this.index), $("#saveMonthlyIncome" + this.index));
	},
	
	initializeValidationRow : function(i) {
		//manually add data-validate attrs to drop-downs after they are appended
		addValidationToId('inLineHowOften' + i, 'notBlank');
		
		var myValidator = new FFM.FormValidator($("#monthlyIncomePageContent" + this.index), $("#saveRow" + i));
	},
	
	customValidation : function(i) {
		var myCustomRules = {
			buttonTable: [
				function(value)
				{
					if(($('#saveRow' + i).length) || ($('#cancelRowEdit' + i).length)){
						return false;
					}else{
						return true;
					}
				},
				resources["ffe.ee.indApp.income.monthlyIncome.error.selectSaveCancel"]
			]
		};

		var myValidator = new FFM.FormValidator($("#monthlyIncomePageContent" + this.index), $("#saveMonthlyIncome" + this.index), myCustomRules);
		
		addValidationToId('editModeButtons' + i, 'buttonTable');
	},
	
	setDataToModel : function()
	{
		var members = this.model.get('applicationMember');
		var currMember = members[this.index];
		var income = null;
		var frequency = "";
		var incomeType = "";
		var hours = "";
		var amount = "";
		var employer = "";
		//todo: maybe not clear this for future, but now it is OK
		if(currMember.receivedCurrentIncomeSourceAttestation === null){
			currMember.receivedCurrentIncomeSourceAttestation = [];
		}
		
		//makes sure it only saves data from page the first time through
		if(currMember.receivedCurrentIncomeSourceAttestation.length === 0){
			for(var x = 0; x < this.hubData.length; x++){
				var selectedRow = $('#editHubData' + this.index + '_' + x).parents('tr')[0];
				var rowData = this.incomeFromHub.fnGetData(selectedRow);
				var currentEntry = this.hubData[x];
				
				//note this will skip deleted rows already...
				if (!isEmpty(selectedRow)){
					
					for (var count = 0; count < 4; count++) {
						rowData[count] = stripHTMLTags(rowData[count]);
					}
					incomeType = this.hubData[x][4];
					amount = parseFloat(unformatCurrency(rowData[1]));
					frequency = getDropDownValueFromDisplayValue(rowData[2]);
					hours = rowData[3];
					employer = currentEntry[0];
					
					if(this.markedAsDeleted[x]){
						amount = 0;
					}
					
					income = createNewCurrentIncomeSource(getIncomeTypeCodeFromType(incomeType), incomeType, amount, getTodaysDate(), getTypeCodeFromFrequency(frequency), frequency);
					income.employerName = employer;
					income.averageWeeklyWorkHourQuantity = hours;
					
					//note: if an employer is removed, their income is 0, so 0 will be < hub Amount and 
					//result in the discrepant monthly income indicator being set to true
					if (this.compareCurrentValueToOriginalHubValue(amount, x) ){
						income.discrepantMonthlyIncomeIndicator = true;
					}else{
						income.discrepantMonthlyIncomeIndicator = false;
					} 
					
					if (incomeType === "Job" || incomeType === "Quarterly Wages")
					{
						income.employerStatusIndicator = true;
					}
					
					currMember.receivedCurrentIncomeSourceAttestation.push(income);
				}
				else //row was deleted, push "empty" income source
				{
					frequency = this.hubData[x][2];
					incomeType = this.hubData[x][4];
					hours = this.hubData[x][3];
					
					income = createNewCurrentIncomeSource(getIncomeTypeCodeFromType(incomeType), incomeType, 0, getTodaysDate(), getTypeCodeFromFrequency(frequency), frequency);
					income.averageWeeklyWorkHourQuantity = hours;
					income.discrepantMonthlyIncomeIndicator = true;
					
					if (incomeType === "Job" || incomeType === "Quarterly Wages")
					{
						income.employerStatusIndicator = false;
						income.employerName = this.hubData[x][0]; // Need to store employer name so it can be displayed on stopped working discrepancy card
					}
					
					currMember.receivedCurrentIncomeSourceAttestation.push(income);
				}
			}
			this.model.set({'applicationMember' : members});
			this.model.set({'cardName' : 'MonthlyIncome'});
		}
	},
	//if the current value atteseted to is < original hub data, mark discrepant indicator
	compareCurrentValueToOriginalHubValue : function(amount, index)
	{
		var discrepant = false;
		var fullHubVal = this.originalHubData[index];
		//[1] is the amount
		var hubVal = parseFloat(unformatCurrency(fullHubVal[1]));
		var newAmount = parseFloat(unformatCurrency(amount)); //unformatt and parse, just in case
		
		if(hubVal > newAmount){
			discrepant = true;
		}
		
		return discrepant;
	},
	initializeDataTable : function()
	{	
		this.incomeFromHub = initializeDataTableWithIncomeOptions('monthlyIncomeTable' + this.index);
		//fetch data
		var hubDataReturned = false;
		if(!isEmpty(this.currentMember)){
			
			hubDataReturned =  incomeEDSHubDataReturned(this.currentMember);

			console.log('hub data? ' + hubDataReturned);
			if(hubDataReturned){
				this.hubData = [];
				this.originalHubData = [];
				var newIncomeEmployer = {};
				var incomeAmount = 0;
				var currentIncomeVerificationObjectFromEDS = getESDCurrentIncome(this.currentMember);
				var currentIncomeSourcesFromEDS = currentIncomeVerificationObjectFromEDS.requestedCurrentIncomeSourceVerification;
				var currentIncomeSourceAttested = this.currentMember.receivedCurrentIncomeSourceAttestation;
				//more
				var numberOfIncomeRecords = 0;
				var incomeTypeCode = "";
				var incomeType = "";
				var splitIncomeString;
				var calculatedEquivalent = true;
				var employerName = "";
				
				//append the incomes found in the EDS data
				for (var i = 0; i < currentIncomeSourcesFromEDS.length; i++){
					incomeAmount = 0;
					incomeTypeCode = currentIncomeSourcesFromEDS[i].classifyingIncomeSourceTypeCode;
					var currentIncomeSourceAlreadyAttested = findCurrentIncome(currentIncomeSourceAttested,incomeTypeCode);
					var incomeFrequencyTypeCode = "";
					//income type does not exist, is new
					if (isEmpty(currentIncomeSourceAlreadyAttested)){
						incomeAmount = currentIncomeSourcesFromEDS[i].currentIncomeVerificationSourceAmount;
						incomeFrequencyTypeCode = currentIncomeSourcesFromEDS[i].reportedIncomeFrequencyTypeCode;
						
						if (!isEmpty(currentIncomeSourcesFromEDS[i].providingIncomeOrganization))
						{
							employerName = currentIncomeSourcesFromEDS[i].providingIncomeOrganization.organizationNomenclature[0].text;
						}
						else
						{
							employerName = "";
						}
						
					//income type was previously recorded , use the previous attested value
					}else{  
						if (!isEmpty(currentIncomeSourceAlreadyAttested.calculatedMonthlyIncomeEquivalentIndicator))
						{
							if (currentIncomeSourceAlreadyAttested.calculatedMonthlyIncomeEquivalentIndicator !== true)
							{
								calculatedEquivalent = false;
							}
						}
						else
						{
							calculatedEquivalent = false;
						}
						
						if (!calculatedEquivalent)
						{
							incomeAmount = currentIncomeSourceAlreadyAttested.attestationCurrentIncomeSourceAmount;
							incomeFrequencyTypeCode = currentIncomeSourceAlreadyAttested.specifyingIncomeFrequencyTypeCode;
						}	
					}
					incomeType = currentIncomeSourcesFromEDS[i].classifyingIncomeSourceTypeName;
					//splitIncomeString = incomeType.split(' '); not sure why this is splitting the source name - commenting
					//incomeType = splitIncomeString[0];
					if (isEmpty(incomeAmount)){
						incomeAmount = 0;
					}
					 
					if(incomeAmount > 0 && incomeTypeCode !== "3"){
						//n(name, income, frequencyText, incomeType)
						newIncomeEmployer = this.createNewCustomEmployerIncome(employerName, incomeAmount, getFrequencyFromTypeCode(incomeFrequencyTypeCode), getIncomeTypeFromTypeCode(incomeTypeCode));
						this.hubData.push(newIncomeEmployer);
						this.originalHubData.push(newIncomeEmployer);
						numberOfIncomeRecords++;
					}
					this.initializeValidationAll(i);
				}
			}
		}
		//write to data tables the data
		this.writeDataTable(this.hubData);		
	},

	createNewCustomEmployerIncome : function(name, income, frequencyText, incomeType)
	{
		var employerIncome =
		[
			name, //employerName: 
			income,
			frequencyText,
			'',
			incomeType
		];
		return employerIncome;
	},
	
	writeDataTable: function(hubData)
	{		
		this.incomeFromHub.fnClearTable();
		for(var i = 0; i < hubData.length; i++){
			if(!this.markedAsDeleted[i]){
				var currentEntry = hubData[i];
				var employerName = currentEntry[0];
				var source = currentEntry[4];
				var amount = currentEntry[1];
				var frequency = getDisplayFrequencyFromTypeCode(getTypeCodeFromFrequency(currentEntry[2]),resources);
				var hoursPerWeek = ""; //possible
				var currIndex = this.index + '_' + i;

				this.previousEditValues.push([source, amount, frequency, hoursPerWeek]);				
				this.incomeFromHub.fnAddData([
	   				'<td><strong>' + getDisplayIncomeTypeFromTypeCode(getHubIncomeTypeCodeFromType(source),resources) + "</strong><br />" + employerName + '</td>',
	   				'<td>' + formatCurrency(amount) + '</td>',
	   				'<td>' + frequency + '</td>',
	   				'<td>' + hoursPerWeek + '</td>',
	   				'<td><button id="editHubData' + currIndex + '" class="btn btn-leftArrow btn-xmini editHubData">'+resources['ffe.ee.shared.button.edit']+'</button><button id="deleteHubData' + currIndex + '" class="btn btn-info btn-xmini deleteHubData">'+resources['ffe.ee.shared.button.remove']+'</button></td>'
	   			]);
				
				//hides edit & delete buttons when returning to hub page
				var members = this.model.get('applicationMember');
				var index = indAppState.getIndex();
				
				if(members[index].receivedCurrentIncomeSourceAttestation.length > 0){
					$('#editHubData' + currIndex).hide();
					$('#deleteHubData' + currIndex).hide();
				}
			}
		}
			
	},
	confirmDelete : function(selectedId)
	{
		var selectedRow = $('#' + selectedId).parents('tr')[0];
		this.incomeFromHub.fnDeleteRow(selectedRow);
	},
	cancelDelete : function(event)
	{
		var selectedRow = $('#' + event.target.id).parents('tr')[0];		
		var currIndex = getIndexFromEventObj(event);
		
		//show delete icon again
		this.incomeFromHub.fnUpdate('<button id="deleteHubData' + currIndex + '" class="btn btn-info btn-xmini deleteHubData">'+resources['ffe.ee.shared.button.remove']+'</button>',selectedRow,5,false);
		this.incomeFromHub.fnDraw();
		return false;
	},
	deleteHubData : function(event)
	{
		var selectedId = getIdFromEvent(event);
		this.model.trigger("initializeRemoveMonthlyIncomeModal", selectedId);
	},
	saveHubDataEdit : function(event)
	{
		this.hideValidationErrors();
		var currIndex = getIndexFromEventObj(event);
		var selectedRow = $('#' + event.target.id).parents('tr')[0];
		var rowValues = $('input',selectedRow);
		
		//NOTE the select val is different
		var selectValue = $('select', selectedRow);
		
		if (!isEmpty(selectedRow)) {
			//note we are skipping editing of row[0], so the row[1] data gets placed in row[0].		
			this.incomeFromHub.fnUpdate(rowValues[0].value,selectedRow,1,false);
			this.incomeFromHub.fnUpdate(getDisplayFrequencyFromTypeCode(getTypeCodeFromFrequency(selectValue[0].value),resources),selectedRow,2,false);
			this.incomeFromHub.fnUpdate(rowValues[1].value,selectedRow,3,false);
			this.incomeFromHub.fnUpdate('<button id="editHubData' + currIndex + '" class="btn btn-leftArrow btn-xmini editHubData">'+resources['ffe.ee.shared.button.edit']+'</button><button id="deleteHubData' + currIndex + '" class="btn btn-info btn-xmini deleteHubData">'+resources['ffe.ee.shared.button.remove']+'</button>',selectedRow,4,false);
			this.incomeFromHub.fnDraw();				
		}
	},
	cancelHubDataEdit : function(event) 
	{
		var currIndex = getIndexFromEventObj(event);
		var selectedRow = $('#' + event.target.id).parents('tr')[0];
		
		//restore the last backed up values, not the original from hub
		var oldVals = this.previousEditValues[currIndex];
		
		this.incomeFromHub.fnUpdate(oldVals[0],selectedRow,0,false);
		this.incomeFromHub.fnUpdate(oldVals[1],selectedRow,1,false);
		this.incomeFromHub.fnUpdate(oldVals[2],selectedRow,2,false);
		this.incomeFromHub.fnUpdate(oldVals[3],selectedRow,3,false);
		this.incomeFromHub.fnUpdate('<button id="editHubData' + currIndex + '" class="btn btn-leftArrow btn-xmini editHubData">'+resources['ffe.ee.shared.button.edit']+'</button><button id="deleteHubData' + currIndex + '" class="btn btn-info btn-xmini deleteHubData">Delete</button>',selectedRow,4,false);
		this.incomeFromHub.fnDraw();
		
		return false;
	},
	editHubData : function(event)
	{
		var currIndex = getIndexFromEventObj(event);
		
		var selectedRow = $('#' + event.target.id).parents('tr')[0];
		var rowData = this.incomeFromHub.fnGetData(selectedRow);
		
		for (var count = 1; count < 5; count++) {
			rowData[count] = stripHTMLTags(rowData[count]);
		}
		
		var rowColumns = $('td',selectedRow);
		
		//stored data in backup.. store again?
		
		this.previousEditValues[currIndex] = [rowData[0], rowData[1], rowData[2], rowData[3]];
		
		//NOTE here is where the problem is the saving /edit of the drop down seems...not right maybe i need to extract the value separately
		
		rowColumns[1].innerHTML = '<label for="inLineAmount' + currIndex + '" class="hiddenText">' + resources['ffe.ee.indApp.income.monthlyIncomeAdditional.label.amount'] + '</label><input id="inLineAmount' + currIndex + '" class="small" type="text" value="' + rowData[1] + '" data-validate="notBlank eeCurrency">';
		rowColumns[2].innerHTML = '<div id="inLineHowOftenSection' + currIndex + '"></div>'; //down down to write to
		rowColumns[3].innerHTML = '<label for="inLineHours' + currIndex + '" class="hiddenText">'+ resources['ffe.ee.indApp.income.monthlyIncome.template.tableHeader4'] + '</label><input id="inLineHours' + currIndex + '" class="small" type="text" value="' + rowData[3] + '" style="display:none;">';
		rowColumns[4].innerHTML = '<button id="saveRow' + currIndex + '" class="btn btn-info btn-xmini saveRow" data-validationtrigger>'+resources['ffe.ee.shared.button.save']+'</button><button id="cancelRowEdit' + currIndex + '" class="btn btn-info btn-xmini cancelHubDataEdit">'+resources['ffe.ee.shared.button.cancel']+'</button>';
		
		//write to drop down
		// type="text" value="'+rowData[2]+'"
		$('#inLineHowOftenSection' + currIndex).append(this.howOftenDDTemplate({
			labelToUse : resources['ffe.ee.indApp.income.personalIncomeSummary.currentMonthly.header3'],
			idToUse : 'inLineHowOften' + currIndex,
			forToUse : 'inLineHowOften' + currIndex,
			classes : 'inLineHowOftenDropDown small',
			isRequired : false
		}));
		
		//pre select the value
		$('#inLineHowOften' + currIndex).val(getDropDownValueFromDisplayValue(rowData[2]));
		if(rowData[2] === 'Hourly'){
			$('#inLineHours' + currIndex).show();
			addValidationListToId('inLineHours' + currIndex, ['notBlank', 'eeNumeric']);
		}
		
		//apply formatting
		applyIncomeFormattingForId('inLineAmount' + currIndex);
		
		this.initializeValidationRow(currIndex);
		
		return false;
	},
	toggleHourly : function(event)
	{
		var currIndex = getIndexFromEventObj(event);
		var val = $('#inLineHowOften' + currIndex).val();
		
		if(val === 'Hourly'){
			$('#inLineHours' + currIndex).show();
			addValidationListToId('inLineHours' + currIndex, ['notBlank', 'eeNumeric']);
		}else{
			$('#inLineHours' + currIndex).val('');
			$('#inLineHours' + currIndex).hide();
			$('#inLineHours' + currIndex + '-feedbackMsg').empty();
			removeValidationFromId('inLineHours' + currIndex);
		}
	},
	checkboxChecker : function(currIndex)
	{
		var checked = true;
		if(!isCheckboxChecked('monthlyIncomeInfoCorrect' + currIndex)){
			$('#monthlyIncomeInfoCorrect' + currIndex + 'Error').show();
			checked = false;
		}
		return checked;
	},
	editModeSaver : function()
	{
		var checked = true;
		for(var x = 0; x < this.hubData.length; x++){
			var i = this.index + '_' + x;
			if(($('#saveRow' + i).length)){
				$('#saveRow' + i).click();
			}
		}
		return checked;
	},
	edit : function(e) {
		rewindToCard(	e,
						this,
						router,
						"monthlyIncome",
						"monthlyIncomePage");
	},
	save : function(event)
	{
		var currIndex = getIndexFromEventObj(event);
		this.hideValidationErrors();
		$('#monthlyIncomeInfoCorrect' + currIndex + 'Error').hide();
		if (this.checkboxChecker(currIndex)){
			if (this.editModeSaver()){
				this.setDataToModel();
				switchToManageIncomeVerificationModel(this.model);
				saveManageVerifyIncomeModel(this.model);
				indAppState.setCurrentView('monthlyIncomePage');
				this.model.trigger("refreshAdditionalMonthlyIncomeTemplates");
				router.navigate("additionalMonthlyIncome", {trigger: true});
				indAppState.resetCurrentView();
			}
		}
	}
});
var individualApplicationMonthlyIncomeBBView = new IndividualApplication_MonthlyIncomeBBView();
